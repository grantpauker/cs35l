- I added a "check" rule to the Makefile that would run a shell script named "check." 
- I wrote a shell scriped named "check" that runs randall with a few different numbers and ensures that the correct number of characters are output.
- I split up all the code in randall.c into separate files. I had to include the necessary header files and to remove the static property of each function.
- I added rules to the Makefile for the new files so everything would build.
- I created an option parser that used pointers to set flags determining which mode to run in. 
- I added to software_rand64 to allow alternative filenames and mrand48 usage.
- I implemented the usage of mrand48 in software_rand64.
- I added if statements to randall.c to allow numbers to be generated with the different modes (sw/hw).
- I wrote a function that would allow a random string of 8 characters to be generated by the randomly generated long long.
- I added to randall.c to create a buffer of size nbytes that contained random characters using my new function.
- I wrote a loop to print out size N chunks of these characters.
- I moved all this code to output.c.
- I added if statements in randall.c to deal with the different output methods.
- Timings are below (-i /dev/urandom is the fastest):

time ./randall 10000000 >/dev/null
real	0m0.239s
user	0m0.237s
sys	0m0.000s

time ./randall 10000000 | cat >/dev/null
real	0m0.246s
user	0m0.237s
sys	0m0.021s

time ./randall 10000000 >rand.data
real	0m0.343s
user	0m0.234s
sys	0m0.009s

time ./randall -i /dev/urandom 10000000 >/dev/null
real	0m0.138s
user	0m0.062s
sys	0m0.075s